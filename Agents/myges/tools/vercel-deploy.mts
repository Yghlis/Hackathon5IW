import { tool } from "@langchain/core/tools";
import { z } from "zod";
import { promises as fs } from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

// Fonction de d√©ploiement r√©elle (utilisable directement)
export async function deployToVercel(projectPath: string, projectName: string) {
  return await deployToVercelTool.invoke({ projectPath, projectName });
}

// Tool LangChain pour l'agent
export const deployToVercelTool = tool(
  async ({ projectPath, projectName }) => {
    try {
      console.log(`üöÄ D√©ploiement r√©el sur Vercel: ${projectName}`);
      
      // V√©rifier que le dossier existe
      const exists = await fs.access(projectPath).then(() => true).catch(() => false);
      if (!exists) {
        return {
          success: false,
          error: "WORKFLOW INCOMPLET - Code non g√©n√©r√©",
          message: `üö® **ERREUR CRITIQUE DE WORKFLOW** üö®

‚ùå **PROBL√àME :** Le code du site n'existe pas car l'√©tape \`generateWebsiteCode()\` a √©t√© ignor√©e !

üîß **SOLUTION IMM√âDIATE :**
L'agent DOIT suivre l'ordre exact :
1. ‚úÖ \`getProjectInfo()\` - OK
2. ‚ùå \`generateWebsiteCode()\` - **MANQU√â !**
3. ‚ùå \`deployToVercel()\` - Impossible sans √©tape 2

üìÅ **Dossier recherch√© :** ${projectPath}
‚ö†Ô∏è  **D√âPLOIEMENT IMPOSSIBLE SANS G√âN√âRATION DE CODE !**

üí° **L'agent doit d'abord g√©n√©rer le code avant de tenter un d√©ploiement.**`
        };
      }

      // V√©rifier qu'il s'agit d'un projet Next.js
      const packageJsonPath = path.join(projectPath, 'package.json');
      const packageJsonExists = await fs.access(packageJsonPath).then(() => true).catch(() => false);
      
      if (!packageJsonExists) {
        return {
          success: false,
          error: "Structure de projet invalide",
          message: `‚ùå **ERREUR : Projet Next.js invalide**

Le projet g√©n√©r√© ne contient pas de \`package.json\`.
**Chemin v√©rifi√© :** ${packageJsonPath}

**Fichiers requis pour le d√©ploiement :**
- package.json ‚úó
- app/page.tsx ‚úó
- app/layout.tsx ‚úó
- next.config.js ‚úó

**Solution :** Reg√©n√©rer le projet avec la structure Next.js compl√®te.`
        };
      }

      // Cr√©er/mettre √† jour le fichier vercel.json pour Next.js 14 App Router
      const vercelConfig = {
        "version": 2,
        "framework": "nextjs"
      };

      await fs.writeFile(
        path.join(projectPath, 'vercel.json'), 
        JSON.stringify(vercelConfig, null, 2)
      );

      console.log(`üì¶ Ex√©cution du d√©ploiement...`);
      
      // V√©rifier la disponibilit√© de Vercel CLI
      try {
        await execAsync('npx vercel --version', { timeout: 30000 });
      } catch (versionError) {
        return {
          success: false,
          error: "Vercel CLI non disponible",
          message: `‚ùå **ERREUR : Vercel CLI non disponible**

**Probl√®me :** ${versionError.message}

**Solutions :**
1. **Installer Vercel CLI globalement :**
   \`npm install -g vercel\`

2. **Ou utiliser npx :**
   \`npx vercel --version\`

3. **V√©rifier la connectivit√© r√©seau**

**D√©ploiement manuel :**
\`cd "${projectPath}" && npx vercel --prod\``
        };
      }

      // Construire la commande de d√©ploiement
      let deployCommand;
      
      if (process.env.VERCEL_TOKEN) {
        // D√©ploiement automatis√© avec token
        deployCommand = `cd "${projectPath}" && npx vercel --prod --yes --token ${process.env.VERCEL_TOKEN}`;
      } else {
        // D√©ploiement interactif (n√©cessite une session utilisateur)
        deployCommand = `cd "${projectPath}" && npx vercel --prod --yes`;
      }
      
      try {
        const { stdout, stderr } = await execAsync(deployCommand, { 
          timeout: 300000, // 5 minutes timeout pour le build Next.js
          maxBuffer: 1024 * 1024 * 10 // 10MB buffer pour les logs
        });
        
        console.log('üìã Stdout:', stdout);
        if (stderr) console.log('‚ö†Ô∏è Stderr:', stderr);
        
        // Extraire l'URL de d√©ploiement depuis la sortie de Vercel
        const urlMatches = stdout.match(/https:\/\/[^\s]+\.vercel\.app/g);
        let deploymentUrl = urlMatches ? urlMatches[urlMatches.length - 1] : null; // Prendre la derni√®re URL (production)
        
        // Fallback: chercher dans stderr aussi
        if (!deploymentUrl && stderr) {
          const stderrMatches = stderr.match(/https:\/\/[^\s]+\.vercel\.app/g);
          deploymentUrl = stderrMatches ? stderrMatches[stderrMatches.length - 1] : null;
        }
        
        if (deploymentUrl) {
          // V√©rifier que le site est accessible
          try {
            const testResponse = await fetch(deploymentUrl, { 
              method: 'HEAD',
              timeout: 10000 
            });
            
            if (testResponse.ok) {
              return {
                success: true,
                url: deploymentUrl,
                deployedUrl: deploymentUrl, // Compatibilit√© avec image-generator.mts
                projectName: projectName,
                message: `üéâ **SITE D√âPLOY√â AVEC SUCC√àS !** üöÄ

üåê **VOTRE SITE EST EN LIGNE √Ä CETTE ADRESSE :**
üëÜ **CLIQUEZ ICI :** ${deploymentUrl}

‚úÖ **Votre site est maintenant accessible dans le monde entier !**

üìã **INFORMATIONS IMPORTANTES :**
‚Ä¢ Copiez cette URL et partagez-la avec vos clients
‚Ä¢ Le site fonctionne sur mobile, tablette et ordinateur  
‚Ä¢ Disponible 24h/24, 7j/7
‚Ä¢ S√©curis√© avec HTTPS automatique
‚Ä¢ Build Next.js optimis√© pour la performance

üîß **Pour modifier votre site :** Contactez-nous avec vos demandes !`,
                clickableUrl: deploymentUrl,
                isReal: true,
                instructions: [
                  "‚úÖ Site en ligne imm√©diatement",
                  "üîí URL s√©curis√©e avec HTTPS automatique", 
                  "üì± Optimis√© mobile et desktop",
                  "üöÄ Performance Next.js optimis√©e",
                  "üìä R√©f√©rencement SEO automatique",
                  "‚ö° Edge network mondial Vercel"
                ]
              };
            } else {
              throw new Error(`Site d√©ploy√© mais inaccessible (status: ${testResponse.status})`);
            }
          } catch (testError) {
            // Site d√©ploy√© mais test d'accessibilit√© √©chou√©
            console.warn('‚ö†Ô∏è Test d\'accessibilit√© √©chou√©:', testError.message);
            return {
              success: true,
              url: deploymentUrl,
              deployedUrl: deploymentUrl, // Compatibilit√© avec image-generator.mts
              projectName: projectName,
              message: `üéâ **SITE D√âPLOY√â !** üöÄ

üåê **URL DE VOTRE SITE :**
üëÜ **CLIQUEZ ICI :** ${deploymentUrl}

‚ö†Ô∏è **Note :** Le site est en cours de propagation sur le r√©seau Vercel.
Il sera accessible dans quelques instants (1-2 minutes).

‚úÖ **Caract√©ristiques :**
‚Ä¢ HTTPS automatique et s√©curis√©
‚Ä¢ Compatible mobile, tablette et desktop
‚Ä¢ Performance optimis√©e Next.js
‚Ä¢ Disponible 24h/24, 7j/7

üîß **Pour des modifications :** Contactez-nous !`,
              clickableUrl: deploymentUrl,
              isReal: true,
              warning: "Site en cours de propagation"
            };
          }
        } else {
          throw new Error("Impossible d'extraire l'URL de d√©ploiement depuis la sortie Vercel");
        }
        
      } catch (deployError) {
        console.error('‚ùå Erreur de d√©ploiement:', deployError);
        
        // Analyser le type d'erreur pour donner des solutions sp√©cifiques
        const errorMessage = deployError.message || '';
        
        if (errorMessage.includes('ENOTFOUND') || errorMessage.includes('network')) {
          return {
            success: false,
            error: "Erreur de connectivit√© r√©seau",
            message: `‚ùå **ERREUR DE CONNEXION R√âSEAU**

**Probl√®me :** Impossible de contacter les serveurs Vercel

**Solutions :**
1. **V√©rifier la connexion internet**
2. **V√©rifier les param√®tres proxy/firewall**
3. **R√©essayer dans quelques minutes**

**Code g√©n√©r√© dans :** \`${projectPath}\`
**D√©ploiement manuel :** \`cd "${projectPath}" && npx vercel --prod\``
          };
        } else if (errorMessage.includes('timeout')) {
          return {
            success: false,
            error: "Timeout de d√©ploiement",
            message: `‚ùå **TIMEOUT DE D√âPLOIEMENT**

**Probl√®me :** Le d√©ploiement a pris trop de temps (>5 minutes)

**Causes possibles :**
1. **Build Next.js trop long** (code tr√®s volumineux)
2. **Connexion internet lente**
3. **Charge √©lev√©e sur Vercel**

**Solutions :**
1. **R√©essayer :** \`cd "${projectPath}" && npx vercel --prod\`
2. **Optimiser le code g√©n√©r√©**
3. **D√©ployer depuis une meilleure connexion**

**Code disponible dans :** \`${projectPath}\``
          };
        } else if (errorMessage.includes('unauthorized') || errorMessage.includes('authentication')) {
          return {
            success: false,
            error: "Erreur d'authentification Vercel",
            message: `‚ùå **ERREUR D'AUTHENTIFICATION VERCEL**

**Probl√®me :** Token Vercel invalide ou manquant

**Solutions :**
1. **Se connecter √† Vercel :**
   \`npx vercel login\`

2. **Ou configurer un token :**
   - Aller sur https://vercel.com/account/tokens
   - Cr√©er un nouveau token
   - Ajouter dans .env : \`VERCEL_TOKEN=votre_token\`

3. **D√©ployer manuellement :**
   \`cd "${projectPath}" && npx vercel --prod\`

**Code g√©n√©r√© dans :** \`${projectPath}\``
          };
        } else if (errorMessage.includes('build failed') || errorMessage.includes('Build error')) {
          return {
            success: false,
            error: "Erreur de build Next.js",
            message: `‚ùå **ERREUR DE BUILD NEXT.JS**

**Probl√®me :** Le code g√©n√©r√© contient des erreurs de compilation

**Solutions :**
1. **V√©rifier les logs de build dans Vercel Dashboard**
2. **Tester le build localement :**
   \`cd "${projectPath}" && npm run build\`

3. **Reg√©n√©rer le code** avec V0.dev

**Erreur d√©taill√©e :**
\`${errorMessage}\`

**Code source disponible :** \`${projectPath}\``
          };
        } else {
          // Erreur g√©n√©rique
          return {
            success: false,
            error: `Erreur de d√©ploiement: ${deployError.message}`,
            message: `‚ùå **ERREUR DE D√âPLOIEMENT VERCEL**

**Probl√®me :** ${deployError.message}

**Solutions :**
1. **R√©essayer le d√©ploiement :**
   \`cd "${projectPath}" && npx vercel --prod\`

2. **V√©rifier les logs Vercel Dashboard**

3. **D√©ployer √©tape par √©tape :**
   - \`cd "${projectPath}"\`
   - \`npm install\`
   - \`npm run build\`
   - \`npx vercel --prod\`

**Code g√©n√©r√© avec succ√®s dans :** \`${projectPath}\`

**Support Vercel :** https://vercel.com/support`
          };
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©rale d√©ploiement Vercel:', error);
      return {
        success: false,
        error: `Erreur syst√®me: ${error.message}`,
        message: `‚ùå **ERREUR SYST√àME DE D√âPLOIEMENT**

**Probl√®me :** ${error.message}

**Informations de debug :**
- **Projet :** ${projectName}
- **Chemin :** ${projectPath}
- **Node.js :** ${process.version}
- **OS :** ${process.platform}

**Solutions :**
1. **V√©rifier les permissions de fichiers**
2. **V√©rifier l'espace disque disponible**
3. **Red√©marrer le processus serveur**
4. **Contacter le support technique**

**D√©ploiement manuel :** \`cd "${projectPath}" && npx vercel --prod\``
      };
    }
  },
  {
    name: "deployToVercelTool",
    description: "D√©ploie un projet Next.js sur Vercel avec gestion compl√®te des erreurs et optimisations",
    schema: z.object({
      projectPath: z.string().describe("Chemin vers le dossier du projet Next.js √† d√©ployer"),
      projectName: z.string().describe("Nom du projet pour l'URL de d√©ploiement")
    }),
  }
); 