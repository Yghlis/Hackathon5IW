import { tool } from "@langchain/core/tools";
import { z } from "zod";
import { promises as fs } from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

export const deployToVercel = tool(
  async ({ projectPath, projectName }) => {
    try {
      console.log(`üöÄ D√©ploiement r√©el sur Vercel: ${projectName}`);
      
      // V√©rifier que le dossier existe
      const exists = await fs.access(projectPath).then(() => true).catch(() => false);
      if (!exists) {
        return {
          success: false,
          error: "WORKFLOW INCOMPLET - Code non g√©n√©r√©",
          message: `üö® **ERREUR CRITIQUE DE WORKFLOW** üö®

‚ùå **PROBL√àME :** Le code du site n'existe pas car l'√©tape \`generateWebsiteCode()\` a √©t√© ignor√©e !

üîß **SOLUTION IMM√âDIATE :**
L'agent DOIT suivre l'ordre exact :
1. ‚úÖ \`getProjectInfo()\` - OK
2. ‚ùå \`generateWebsiteCode()\` - **MANQU√â !**
3. ‚ùå \`deployToVercel()\` - Impossible sans √©tape 2

üìÅ **Dossier recherch√© :** ${projectPath}
‚ö†Ô∏è  **D√âPLOIEMENT IMPOSSIBLE SANS G√âN√âRATION DE CODE !**

üí° **L'agent doit d'abord g√©n√©rer le code avant de tenter un d√©ploiement.**`
        };
      }

      // Cr√©er un fichier vercel.json pour la configuration
      const vercelConfig = {
        "version": 2,
        "name": projectName.toLowerCase().replace(/[^a-z0-9-]/g, '-'),
        "builds": [
          {
            "src": "index.html",
            "use": "@vercel/static"
          }
        ],
        "routes": [
          {
            "src": "/(.*)",
            "dest": "/$1"
          }
        ]
      };

      await fs.writeFile(
        path.join(projectPath, 'vercel.json'), 
        JSON.stringify(vercelConfig, null, 2)
      );

      // Cr√©er un package.json minimal si il n'existe pas
      const packageJsonPath = path.join(projectPath, 'package.json');
      const packageJsonExists = await fs.access(packageJsonPath).then(() => true).catch(() => false);
      
      if (!packageJsonExists) {
        const packageJson = {
          "name": projectName.toLowerCase().replace(/[^a-z0-9-]/g, '-'),
          "version": "1.0.0",
          "scripts": {
            "build": "echo 'No build process needed for static site'"
          }
        };
        await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2));
      }

      // D√©ployer avec Vercel CLI
      const deployCommand = `cd "${projectPath}" && npx vercel --prod --yes --token ${process.env.VERCEL_TOKEN || ''}`;
      
      console.log(`üì¶ Ex√©cution du d√©ploiement...`);
      
      try {
        const { stdout, stderr } = await execAsync(deployCommand, { 
          timeout: 120000 // 2 minutes timeout
        });
        
        console.log('üìã Stdout:', stdout);
        if (stderr) console.log('‚ö†Ô∏è Stderr:', stderr);
        
        // Extraire l'URL de d√©ploiement depuis la sortie de Vercel
        const urlMatch = stdout.match(/https:\/\/[^\s]+\.vercel\.app/);
        const deploymentUrl = urlMatch ? urlMatch[0] : null;
        
        if (deploymentUrl) {
          return {
            success: true,
            url: deploymentUrl,
            projectName: projectName,
            message: `üéâ **SITE D√âPLOY√â AVEC SUCC√àS !** üöÄ

üåê **VOTRE SITE EST EN LIGNE √Ä CETTE ADRESSE :**
üëÜ **CLIQUEZ ICI :** ${deploymentUrl}

‚úÖ **Votre site est maintenant accessible dans le monde entier !**

üìã **INFORMATIONS IMPORTANTES :**
‚Ä¢ Copiez cette URL et partagez-la avec vos clients
‚Ä¢ Le site fonctionne sur mobile, tablette et ordinateur  
‚Ä¢ Disponible 24h/24, 7j/7
‚Ä¢ S√©curis√© avec HTTPS automatique

üîß **Pour modifier votre site :** Contactez-nous avec vos demandes !`,
            clickableUrl: deploymentUrl,
            isReal: true,
            instructions: [
              "‚úÖ Site en ligne imm√©diatement",
              "üîí URL s√©curis√©e avec HTTPS automatique", 
              "üì± Optimis√© mobile et desktop",
              "üöÄ Performance optimis√©e",
              "üìä R√©f√©rencement SEO de base inclus"
            ]
          };
        } else {
          throw new Error("Impossible d'extraire l'URL de d√©ploiement");
        }
        
      } catch (deployError) {
        console.error('‚ùå Erreur de d√©ploiement:', deployError);
        
        // Si pas de token Vercel, expliquer comment en obtenir un
        if (!process.env.VERCEL_TOKEN) {
          return {
            success: false,
            error: "Token Vercel manquant",
            message: `‚ö†Ô∏è **CONFIGURATION N√âCESSAIRE POUR LE D√âPLOIEMENT R√âEL**

üîë **Pour d√©ployer vraiment sur Vercel :**

1. **Cr√©er un compte Vercel gratuit :**
   - Aller sur https://vercel.com
   - S'inscrire avec GitHub/GitLab/Bitbucket

2. **Obtenir un token d'acc√®s :**
   - Aller dans Settings > Tokens
   - Cr√©er un nouveau token
   - Le copier

3. **Configurer le token :**
   - Ajouter dans votre fichier .env :
   \`VERCEL_TOKEN=votre_token_ici\`

4. **Relancer le d√©ploiement !**

üíª **En attendant, le code est g√©n√©r√© dans :**
\`${projectPath}\`

üîß **Vous pouvez le d√©ployer manuellement avec :**
\`cd "${projectPath}" && npx vercel --prod\``
          };
        }
        
        return {
          success: false,
          error: `Erreur de d√©ploiement: ${deployError.message}`,
          message: `‚ùå Erreur lors du d√©ploiement. Le code est dans: ${projectPath}`
        };
      }
      
    } catch (error) {
      console.error('‚ùå Erreur d√©ploiement Vercel:', error);
      return {
        success: false,
        error: `Impossible de d√©ployer sur Vercel: ${error.message}`,
        message: "‚ùå Erreur lors du d√©ploiement. Veuillez r√©essayer ou contacter le support."
      };
    }
  },
  {
    name: "deployToVercel",
    description: "D√©ploie VRAIMENT un site web sur Vercel et retourne l'URL publique r√©elle",
    schema: z.object({
      projectPath: z.string().describe("Chemin vers le dossier du projet √† d√©ployer"),
      projectName: z.string().describe("Nom du projet pour l'URL de d√©ploiement")
    }),
  }
); 